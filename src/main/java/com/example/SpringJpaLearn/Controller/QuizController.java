package com.example.SpringJpaLearn.Controller;import com.example.SpringJpaLearn.Models.Quiz;import com.example.SpringJpaLearn.Repositories.QuizRepository;import com.example.SpringJpaLearn.Service.QuizService;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.data.domain.PageRequest;import org.springframework.data.domain.Pageable;import org.springframework.data.domain.Sort;import org.springframework.stereotype.Controller;import org.springframework.ui.Model;import org.springframework.web.bind.annotation.*;import java.util.List;@Controller@RequestMapping(path="/quiz")public class QuizController {    @Autowired    private QuizService quizService;//    @GetMapping("/search-name")//    public @ResponseBody String searchByName(@RequestParam("name") String name) {//        // /quiz/search-name?name=quiz1//        List<Quiz> quizList = quizService.findByName(name);//        return quizList.isEmpty()? "*** Not found quiz " + name + " ***" : quizList.stream().reduce("", (start, element) ->//            start + element.toString() + "\n", String::concat);////        return "redirect:/quiz/show?name=" + quiz.getName();//    }    @GetMapping("/search-name/{name}/{sort-direction}")    public @ResponseBody String searchByName(@PathVariable String name, @PathVariable(value = "sort-direction", required = false) String sortDirection) {        // /quiz/search-name?name=quiz1        if (sortDirection == null) {            List<Quiz> quizList = quizService.findByName(name);            return quizList.isEmpty() ? "*** Not found quiz " + name + " ***" : quizList.stream().reduce("", (start, element) ->                    start + element.toString() + "\n", String::concat);        }        else  {            List<Quiz> quizList = quizService.findByName(name, sortDirection);            return quizList == null ? "*** Not found quiz " + name + " ***" : quizList.stream().reduce("", (start, element) ->                    start + element.toString() + "\n", String::concat);        }//        return "redirect:/quiz/show?name=" + quiz.getName();    }    @GetMapping("/search-create-date/{date}/{sort-direction}")    // /quiz/search-create-date/2020-01-01    public @ResponseBody String searchByCreateDate(@PathVariable(name="date") String createDate, @PathVariable(name="sort-direction", required = false) String sortDirection) {        if (sortDirection == null) {            List<Quiz> quizList = quizService.findByCreateDate(createDate);            return quizList.isEmpty()? "*** Not found ***" : quizList.stream().reduce("", (start, element) ->                start + element.toString() + "\n", String::concat);        }        else {            List<Quiz> quizList = quizService.findByCreateDate(createDate);            return quizList == null? "*** Not found ***" : quizList.stream().reduce("", (start, element) ->                    start + element.toString() + "\n", String::concat);        }    }    @Autowired    private QuizRepository quizRepository;//    @RequestMapping("/")//    public String listCustomerPagination(Model model,//                               @RequestParam(name = "page", required = false, defaultValue = "0") Integer page,//                               @RequestParam(name = "size", required = false, defaultValue = "5") Integer size,//                               @RequestParam(name = "sort", required = false, defaultValue = "ASC") String sort) {//        Sort sortable = null;//        if (sort.equals("ASC")) {//            sortable = Sort.by("id").ascending();//        }//        if (sort.equals("DESC")) {//            sortable = Sort.by("id").descending();//        }//        Pageable pageable = PageRequest.of(page, size, sortable);////        model.addAttribute("listCustomer", quizRepository.findAll(pageable));//        return "customer-list";//    }}