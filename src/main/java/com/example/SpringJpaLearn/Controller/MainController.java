package com.example.SpringJpaLearn.Controller;import com.example.SpringJpaLearn.Models.Question;import com.example.SpringJpaLearn.Models.Quiz;import com.example.SpringJpaLearn.Repositories.QuestionRepository;import com.example.SpringJpaLearn.Repositories.QuizRepository;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.context.annotation.ComponentScan;import org.springframework.format.annotation.DateTimeFormat;import org.springframework.stereotype.Controller;import org.springframework.web.bind.annotation.*;import java.net.URLDecoder;import java.nio.charset.StandardCharsets;import java.text.ParseException;import java.text.SimpleDateFormat;import java.util.Calendar;import java.util.Date;import java.util.List;@Controller // this class is for controlling@RequestMapping(path="/demo") // this is for mapping the urlpublic class MainController {    @Autowired // means get the bean called QuizRepository    private QuizRepository quizRepository;    @Autowired    private QuestionRepository questionRepository;    @PostMapping("/add-quiz")    public @ResponseBody String addNewQuiz(@RequestParam String name, @RequestParam("create-date") String createDate) throws Exception {        // @ResponseBody means return String as response        // @RequestParam means it is a parameter from the GET or POST request (/SpringJpaLearn/add-quiz?name=...)        Quiz quiz = new Quiz();        quiz.setName(URLDecoder.decode(name, StandardCharsets.UTF_8));        quiz.setCreateDate((new SimpleDateFormat("yyyy-MM-dd")).parse(URLDecoder.decode(createDate, StandardCharsets.UTF_8)));        quizRepository.save(quiz);//        quiz.setNumQuestion(numQuestion);        return "Saved";    }    @PostMapping("/add-question")    public @ResponseBody String addNewQuestion(@RequestParam String content) {        Question question = new Question();        question.setContent(URLDecoder.decode(content, StandardCharsets.UTF_8));        questionRepository.save(question);        return "saved question";    }    @GetMapping("/all-quizzes")    public @ResponseBody Iterable<Quiz> getAllQuizzes() {        // This is the way to return a list of objects        return quizRepository.findAll();    }    @GetMapping("/all-questions")    public @ResponseBody Iterable<Question> getAllQuestions() {        // This is the way to return a list of objects        return questionRepository.findAll();    }//    @GetMapping("/quiz-questions/{quizNamePath}")//    public @ResponseBody Iterable<Question> getQuizQuestions(@PathVariable String quizNamePath) {//        // This is the way to return a list of objects//        System.out.println(quizNamePath);//        Quiz quizFound = quizRepository.findByName(quizNamePath);//        return questionRepository.findByQuiz(quizFound.getId());//    }}