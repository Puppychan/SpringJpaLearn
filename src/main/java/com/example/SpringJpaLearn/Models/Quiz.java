package com.example.SpringJpaLearn.Models;//import com.fasterxml.jackson.annotation.JsonFormat;//import com.fasterxml.jackson.annotation.JsonIgnore;//import com.fasterxml.jackson.annotation.JsonProperty;//import jdk.jfr.DataAmount;//import lombok.*;//import org.springframework.format.annotation.DateTimeFormat;////import javax.persistence.*;//import java.text.SimpleDateFormat;//import java.util.ArrayList;//import java.util.Date;//import java.util.List;////@Entity(name = "quiz_tbl")////@Table(name = "quiz")////@Table(////        uniqueConstraints = {////                @UniqueConstraint(columnNames = {"quiz_name", "date_of_creation"})////        }////)//@Data//@AllArgsConstructor//@NoArgsConstructor//@Builder//public class Quiz {//    @Id//    @SequenceGenerator(//            name = "quiz_sequence",//            sequenceName = "quiz_sequence",//            allocationSize = 1//    )//    @GeneratedValue(//            strategy = GenerationType.SEQUENCE,//            generator = "quiz_sequence"//    )//    @Column(name = "quiz_id")//    private int quizId;////    @JsonProperty("quiz_name") // for json name//    @Column(//            name = "quiz_name",//            unique = true//    ) // for table column name//    private String name;//////    private int numQuestion;////    @JsonProperty("date_of_creation")//    @JsonFormat(pattern = "yyyy-MM-dd")//    @Column(//            name = "date_of_creation"//    )//    private Date createDate;////    // table will not use this//    @Transient // ignore in table//    @JsonIgnore // ignore in json//    private SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");////////    @JsonIgnore//    @OneToMany(//            cascade = CascadeType.ALL,//            orphanRemoval = true////            fetch = FetchType.LAZY//    )////    @JsonIgnore//    private List<Question> questions;////    @Override//    public String toString() {//        return "Quiz{" +//                "quizId=" + quizId +//                ", name='" + name + '\'' +//                ", createDate=" + createDate +//                ", questions=" + questions +//                '}';//    }////    // constructor//    public Quiz(String name, Date createDate, List<Question> questions) {//        this.name = name;//        this.createDate = createDate;//        this.questions =  questions;//    }////    public Quiz(String name, Date createDate) {////        this.name = name;////        this.createDate = createDate;////        this.questions =  new ArrayList<>();////    }////    public Quiz(String name, int numQuestion) {////        this.name = name;////        this.numQuestion = numQuestion;////    }////}import java.util.Date;import java.text.SimpleDateFormat;import java.util.ArrayList;import java.util.Collection;import javax.persistence.*;import com.fasterxml.jackson.annotation.JsonFormat;import com.fasterxml.jackson.annotation.JsonIgnore;import com.fasterxml.jackson.annotation.JsonProperty;import lombok.*;@Entity(name="quiz_entity") // Đánh dấu đây là table trong db@Data // lombok giúp generate các hàm constructor, get, set v.v.@AllArgsConstructor@NoArgsConstructor@Builderpublic class Quiz {    @Id //Đánh dấu là primary key    @SequenceGenerator(            name = "quiz_seq",            sequenceName = "quiz_seq",            allocationSize = 1    )    @GeneratedValue(            strategy = GenerationType.SEQUENCE,            generator = "quiz_seq"    )    @Column(name = "quiz_id")    private Long quizId;    @JsonProperty("quiz_name") // for json name    @Column(            name = "quiz_name"    ) // for table column name    private String name;//    @JsonProperty("date_of_creation")    @JsonFormat(pattern = "yyyy-MM-dd")    private Date createDate;    // table will not use this    @Transient // ignore in table    @JsonIgnore // ignore in json    private SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");    @OneToMany(mappedBy = "quiz", cascade = CascadeType.ALL) // Quan hệ 1-n với đối tượng ở dưới (Person) (1 địa điểm có nhiều người ở)    // MapopedBy trỏ tới tên biến Address ở trong Person.    @EqualsAndHashCode.Exclude // không sử dụng trường này trong equals và hashcode    @ToString.Exclude // Khoonhg sử dụng trong toString()    @JsonIgnore    private Collection<Question> questions = new ArrayList<>();//    @OneToMany(orphanRemoval=true)//    @JoinColumn(name="question_id")//    @JsonIgnore//    private Collection<Question> questions;    // constructor    public Quiz(String name, Date createDate) {        this.name = name;        this.createDate = createDate;    }    @Override    public String toString() {        return "Quiz " + quizId +                ": name - '" + name + '\'' +                "| date of creation - " + createDate;//                ", questions=" + questions;    }}